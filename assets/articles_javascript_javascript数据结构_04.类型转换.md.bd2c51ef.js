import{_ as e,o as a,c,a as d}from"./app.a729b29f.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.数字->字符串","slug":"_1-数字-字符串","link":"#_1-数字-字符串","children":[]},{"level":2,"title":"2.字符串->数字","slug":"_2-字符串-数字","link":"#_2-字符串-数字","children":[]},{"level":2,"title":"3.转换为布尔型","slug":"_3-转换为布尔型","link":"#_3-转换为布尔型","children":[]}],"relativePath":"articles/javascript/javascript数据结构/04.类型转换.md"}'),t={name:"articles/javascript/javascript数据结构/04.类型转换.md"},o=d('<h2 id="_1-数字-字符串" tabindex="-1">1.数字-&gt;字符串 <a class="header-anchor" href="#_1-数字-字符串" aria-hidden="true">#</a></h2><p>使用 <code>parseInt(&#39;12&#39;)</code> 方法转换整型</p><p>使用 <code>parseFloat(&#39;3.12&#39;)</code> 转换浮点类型</p><p>使用 <code>Number()</code> 强制转换</p><p>JS隐式转换</p><h2 id="_2-字符串-数字" tabindex="-1">2.字符串-&gt;数字 <a class="header-anchor" href="#_2-字符串-数字" aria-hidden="true">#</a></h2><p>使用 <code>num.toString()</code> 方法</p><p>使用 <code>String(num)</code> 方法</p><p>利用 <code>num + &#39;&#39;</code> 的技巧</p><h2 id="_3-转换为布尔型" tabindex="-1">3.转换为布尔型 <a class="header-anchor" href="#_3-转换为布尔型" aria-hidden="true">#</a></h2><p><code>false</code> 、 <code>&#39;&#39;</code> 、 <code>0</code> 、 <code>NaN</code> 、 <code>null</code> 、 <code>undefined</code> 以及其他转换为布尔型</p><p>使用Boolean()方法</p>',12),r=[o];function _(n,i,s,l,p,h){return a(),c("div",null,r)}const m=e(t,[["render",_]]);export{f as __pageData,m as default};
