import{_ as a,o as e,c as r,Q as h}from"./chunks/framework.681fc4ae.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"专题、其他/面试题/JS高级面试题.md","filePath":"专题、其他/面试题/JS高级面试题.md","lastUpdated":null}'),o={name:"专题、其他/面试题/JS高级面试题.md"},t=h('<h2 id="什么是原型链" tabindex="-1">什么是原型链 <a class="header-anchor" href="#什么是原型链" aria-label="Permalink to &quot;什么是原型链&quot;">​</a></h2><h2 id="什么是闭包-手写闭包函数-闭包优缺点-闭包的应用场景" tabindex="-1">什么是闭包，手写闭包函数，闭包优缺点，闭包的应用场景 <a class="header-anchor" href="#什么是闭包-手写闭包函数-闭包优缺点-闭包的应用场景" aria-label="Permalink to &quot;什么是闭包，手写闭包函数，闭包优缺点，闭包的应用场景&quot;">​</a></h2><h2 id="常见的继承" tabindex="-1">常见的继承 <a class="header-anchor" href="#常见的继承" aria-label="Permalink to &quot;常见的继承&quot;">​</a></h2><h2 id="es6新特性有哪些" tabindex="-1">ES6新特性有哪些 <a class="header-anchor" href="#es6新特性有哪些" aria-label="Permalink to &quot;ES6新特性有哪些&quot;">​</a></h2><h2 id="async、await是什么、作用" tabindex="-1">async、await是什么、作用 <a class="header-anchor" href="#async、await是什么、作用" aria-label="Permalink to &quot;async、await是什么、作用&quot;">​</a></h2><h2 id="常用字符串方法" tabindex="-1">常用字符串方法 <a class="header-anchor" href="#常用字符串方法" aria-label="Permalink to &quot;常用字符串方法&quot;">​</a></h2><h2 id="组件中的data为什么要定义成一个函数而不是一个对象" tabindex="-1">组件中的data为什么要定义成一个函数而不是一个对象？ <a class="header-anchor" href="#组件中的data为什么要定义成一个函数而不是一个对象" aria-label="Permalink to &quot;组件中的data为什么要定义成一个函数而不是一个对象？&quot;">​</a></h2><p>每个组件都是 Vue 的实例。组件共享 data 属性，当 data 的值是同一个引用类型的值时，改变其中一 个会影响其他</p><h2 id="this的指向有哪些" tabindex="-1">this的指向有哪些 <a class="header-anchor" href="#this的指向有哪些" aria-label="Permalink to &quot;this的指向有哪些&quot;">​</a></h2><h2 id="什么是递归及其优缺点" tabindex="-1">什么是递归及其优缺点 <a class="header-anchor" href="#什么是递归及其优缺点" aria-label="Permalink to &quot;什么是递归及其优缺点&quot;">​</a></h2><h2 id="深拷贝、浅拷贝" tabindex="-1">深拷贝、浅拷贝 <a class="header-anchor" href="#深拷贝、浅拷贝" aria-label="Permalink to &quot;深拷贝、浅拷贝&quot;">​</a></h2><h2 id="js执行机制是怎样的" tabindex="-1">JS执行机制是怎样的 <a class="header-anchor" href="#js执行机制是怎样的" aria-label="Permalink to &quot;JS执行机制是怎样的&quot;">​</a></h2><h2 id="知道lodash吗-它有哪些常见的api" tabindex="-1">知道lodash吗？它有哪些常见的API ？ <a class="header-anchor" href="#知道lodash吗-它有哪些常见的api" aria-label="Permalink to &quot;知道lodash吗？它有哪些常见的API ？&quot;">​</a></h2><p>Lodash是一个一致性、模块化、高性能的 JavaScript 实用工具库。 _.cloneDeep 深度拷贝 _.reject 根据条件去除某个元素。 _.drop(array, [n=1] ) 作用：将 array 中的前 n 个元素去掉，然后返回剩余的部分</p><h2 id="谈谈set-、-map-是什么" tabindex="-1">谈谈set 、 map 是什么？ <a class="header-anchor" href="#谈谈set-、-map-是什么" aria-label="Permalink to &quot;谈谈set 、 map 是什么？&quot;">​</a></h2><p>set 是es6 提供的一种新的数据结构，它类似于数组，但是成员的值都是唯一的。 map 是es6 提供的一种新的数据结构,它类似于对象，也是键值对的集合，但是键的范围不仅限于字符 串，各种类型的值都可以当做键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供 了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适</p><h2 id="symbol" tabindex="-1">symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;symbol&quot;">​</a></h2><p>ES6 引入新的原始数据类型Symbol，表示独一无二的值</p><h2 id="描述一下es6中的class类" tabindex="-1">描述一下ES6中的class类 <a class="header-anchor" href="#描述一下es6中的class类" aria-label="Permalink to &quot;描述一下ES6中的class类&quot;">​</a></h2><h2 id="promise是什么及其作用" tabindex="-1">promise是什么及其作用 <a class="header-anchor" href="#promise是什么及其作用" aria-label="Permalink to &quot;promise是什么及其作用&quot;">​</a></h2><h2 id="箭头函数的特征" tabindex="-1">箭头函数的特征 <a class="header-anchor" href="#箭头函数的特征" aria-label="Permalink to &quot;箭头函数的特征&quot;">​</a></h2><h2 id="js的数据类型有哪些-存储上的差别" tabindex="-1">JS的数据类型有哪些？存储上的差别？ <a class="header-anchor" href="#js的数据类型有哪些-存储上的差别" aria-label="Permalink to &quot;JS的数据类型有哪些？存储上的差别？&quot;">​</a></h2><h2 id="数据类型的判断有哪些方法及其优缺点" tabindex="-1">数据类型的判断有哪些方法及其优缺点 <a class="header-anchor" href="#数据类型的判断有哪些方法及其优缺点" aria-label="Permalink to &quot;数据类型的判断有哪些方法及其优缺点&quot;">​</a></h2><h2 id="引用类型有哪些" tabindex="-1">引用类型有哪些？ <a class="header-anchor" href="#引用类型有哪些" aria-label="Permalink to &quot;引用类型有哪些？&quot;">​</a></h2><h2 id="null和undefined的区别" tabindex="-1">null和undefined的区别 <a class="header-anchor" href="#null和undefined的区别" aria-label="Permalink to &quot;null和undefined的区别&quot;">​</a></h2><h2 id="call、apply、bind三者的异同" tabindex="-1">call、apply、bind三者的异同 <a class="header-anchor" href="#call、apply、bind三者的异同" aria-label="Permalink to &quot;call、apply、bind三者的异同&quot;">​</a></h2><p>共同点 : 都可以改变this指向; 不同点: call 和 apply 会调用函数, 并且改变函数内部this指向. call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递 bind 不会调用函数, 可以改变函 数内部this指向. 应用场景</p><ol><li>call 经常做继承.</li><li>apply经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向</li></ol><h2 id="如何实现一个bind" tabindex="-1">如何实现一个bind？ <a class="header-anchor" href="#如何实现一个bind" aria-label="Permalink to &quot;如何实现一个bind？&quot;">​</a></h2><h2 id="ajax原理是什么-如何实现" tabindex="-1">AJAX原理是什么？如何实现？ <a class="header-anchor" href="#ajax原理是什么-如何实现" aria-label="Permalink to &quot;AJAX原理是什么？如何实现？&quot;">​</a></h2><h2 id="什么是防抖节流-区别-如何实现" tabindex="-1">什么是防抖节流？区别？如何实现？ <a class="header-anchor" href="#什么是防抖节流-区别-如何实现" aria-label="Permalink to &quot;什么是防抖节流？区别？如何实现？&quot;">​</a></h2><h2 id="什么是事件代理-应用场景" tabindex="-1">什么是事件代理？应用场景 <a class="header-anchor" href="#什么是事件代理-应用场景" aria-label="Permalink to &quot;什么是事件代理？应用场景&quot;">​</a></h2><h2 id="对事件循环的理解" tabindex="-1">对事件循环的理解 <a class="header-anchor" href="#对事件循环的理解" aria-label="Permalink to &quot;对事件循环的理解&quot;">​</a></h2><h2 id="js内存泄露的几种情况" tabindex="-1">JS内存泄露的几种情况 <a class="header-anchor" href="#js内存泄露的几种情况" aria-label="Permalink to &quot;JS内存泄露的几种情况&quot;">​</a></h2><h2 id="new操作符具体干了什么" tabindex="-1">new操作符具体干了什么 <a class="header-anchor" href="#new操作符具体干了什么" aria-label="Permalink to &quot;new操作符具体干了什么&quot;">​</a></h2><h2 id="如何实现上拉加载-下拉刷新" tabindex="-1">如何实现上拉加载，下拉刷新？ <a class="header-anchor" href="#如何实现上拉加载-下拉刷新" aria-label="Permalink to &quot;如何实现上拉加载，下拉刷新？&quot;">​</a></h2><h2 id="对作用域链的理解" tabindex="-1">对作用域链的理解 <a class="header-anchor" href="#对作用域链的理解" aria-label="Permalink to &quot;对作用域链的理解&quot;">​</a></h2><h2 id="var、let、const之间的区别" tabindex="-1">var、let、const之间的区别 <a class="header-anchor" href="#var、let、const之间的区别" aria-label="Permalink to &quot;var、let、const之间的区别&quot;">​</a></h2><h2 id="js原生绑定事件的方式-如何实现" tabindex="-1">JS原生绑定事件的方式，如何实现？ <a class="header-anchor" href="#js原生绑定事件的方式-如何实现" aria-label="Permalink to &quot;JS原生绑定事件的方式，如何实现？&quot;">​</a></h2><h2 id="创建对象的几种方法" tabindex="-1">创建对象的几种方法 <a class="header-anchor" href="#创建对象的几种方法" aria-label="Permalink to &quot;创建对象的几种方法&quot;">​</a></h2><h2 id="创建函数的几种方式" tabindex="-1">创建函数的几种方式 <a class="header-anchor" href="#创建函数的几种方式" aria-label="Permalink to &quot;创建函数的几种方式&quot;">​</a></h2><h2 id="指出js宿主对象和原生对象的区别" tabindex="-1">指出JS宿主对象和原生对象的区别 <a class="header-anchor" href="#指出js宿主对象和原生对象的区别" aria-label="Permalink to &quot;指出JS宿主对象和原生对象的区别&quot;">​</a></h2><h2 id="js内置常用对象有哪些-常用对象的方法" tabindex="-1">JS内置常用对象有哪些，常用对象的方法 <a class="header-anchor" href="#js内置常用对象有哪些-常用对象的方法" aria-label="Permalink to &quot;JS内置常用对象有哪些，常用对象的方法&quot;">​</a></h2><h2 id="和-的区别" tabindex="-1">==和===的区别 <a class="header-anchor" href="#和-的区别" aria-label="Permalink to &quot;==和===的区别&quot;">​</a></h2><h2 id="js中什么情况下会返回undefined值" tabindex="-1">JS中什么情况下会返回undefined值？ <a class="header-anchor" href="#js中什么情况下会返回undefined值" aria-label="Permalink to &quot;JS中什么情况下会返回undefined值？&quot;">​</a></h2><h2 id="如何区分数组和对象" tabindex="-1">如何区分数组和对象？ <a class="header-anchor" href="#如何区分数组和对象" aria-label="Permalink to &quot;如何区分数组和对象？&quot;">​</a></h2><h2 id="怎么判断两个对象相等" tabindex="-1">怎么判断两个对象相等？ <a class="header-anchor" href="#怎么判断两个对象相等" aria-label="Permalink to &quot;怎么判断两个对象相等？&quot;">​</a></h2><h2 id="列举三种强制类型转换和隐式类型转换" tabindex="-1">列举三种强制类型转换和隐式类型转换 <a class="header-anchor" href="#列举三种强制类型转换和隐式类型转换" aria-label="Permalink to &quot;列举三种强制类型转换和隐式类型转换&quot;">​</a></h2><h2 id="获取当前日期的月份" tabindex="-1">获取当前日期的月份 <a class="header-anchor" href="#获取当前日期的月份" aria-label="Permalink to &quot;获取当前日期的月份&quot;">​</a></h2><h2 id="如何遍历对象的属性" tabindex="-1">如何遍历对象的属性 <a class="header-anchor" href="#如何遍历对象的属性" aria-label="Permalink to &quot;如何遍历对象的属性&quot;">​</a></h2><h2 id="src和href的区别" tabindex="-1">src和href的区别 <a class="header-anchor" href="#src和href的区别" aria-label="Permalink to &quot;src和href的区别&quot;">​</a></h2><h2 id="如何使用原生js给一个按钮绑定两个onclick事件" tabindex="-1">如何使用原生JS给一个按钮绑定两个onclick事件？ <a class="header-anchor" href="#如何使用原生js给一个按钮绑定两个onclick事件" aria-label="Permalink to &quot;如何使用原生JS给一个按钮绑定两个onclick事件？&quot;">​</a></h2><h2 id="js中的作用域、域解析、变量提升" tabindex="-1">JS中的作用域、域解析、变量提升 <a class="header-anchor" href="#js中的作用域、域解析、变量提升" aria-label="Permalink to &quot;JS中的作用域、域解析、变量提升&quot;">​</a></h2><h2 id="变量提升与函数提升的区别" tabindex="-1">变量提升与函数提升的区别 <a class="header-anchor" href="#变量提升与函数提升的区别" aria-label="Permalink to &quot;变量提升与函数提升的区别&quot;">​</a></h2><h2 id="什么是作用域链" tabindex="-1">什么是作用域链 <a class="header-anchor" href="#什么是作用域链" aria-label="Permalink to &quot;什么是作用域链&quot;">​</a></h2><h2 id="如何延长作用域链" tabindex="-1">如何延长作用域链 <a class="header-anchor" href="#如何延长作用域链" aria-label="Permalink to &quot;如何延长作用域链&quot;">​</a></h2><h2 id="判断一个值是什么类型有哪些方法" tabindex="-1">判断一个值是什么类型有哪些方法 <a class="header-anchor" href="#判断一个值是什么类型有哪些方法" aria-label="Permalink to &quot;判断一个值是什么类型有哪些方法&quot;">​</a></h2><h2 id="js变量按照存储方式区分为哪些类型-并描述其特点" tabindex="-1">JS变量按照存储方式区分为哪些类型，并描述其特点 <a class="header-anchor" href="#js变量按照存储方式区分为哪些类型-并描述其特点" aria-label="Permalink to &quot;JS变量按照存储方式区分为哪些类型，并描述其特点&quot;">​</a></h2><h2 id="fuction-foo-和var-foo-function-之间foo用法上的区别" tabindex="-1">Fuction foo()和var foo = function()之间foo用法上的区别？ <a class="header-anchor" href="#fuction-foo-和var-foo-function-之间foo用法上的区别" aria-label="Permalink to &quot;Fuction foo()和var foo = function()之间foo用法上的区别？&quot;">​</a></h2><h2 id="索引有哪几种类型-有什么区别-了解" tabindex="-1">索引有哪几种类型，有什么区别？ 了解 <a class="header-anchor" href="#索引有哪几种类型-有什么区别-了解" aria-label="Permalink to &quot;索引有哪几种类型，有什么区别？ 了解&quot;">​</a></h2><h2 id="简述js脚本的执行原理" tabindex="-1">简述JS脚本的执行原理 <a class="header-anchor" href="#简述js脚本的执行原理" aria-label="Permalink to &quot;简述JS脚本的执行原理&quot;">​</a></h2>',61),l=[t];function i(n,d,s,c,u,b){return e(),r("div",null,l)}const m=a(o,[["render",i]]);export{f as __pageData,m as default};
