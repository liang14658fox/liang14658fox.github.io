import{_ as a,o as e,c as t,Q as o}from"./chunks/framework.681fc4ae.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"专题、其他/面试题/浏览器与网络面试题.md","filePath":"专题、其他/面试题/浏览器与网络面试题.md","lastUpdated":1719474694000}'),r={name:"专题、其他/面试题/浏览器与网络面试题.md"},h=o('<h2 id="如何实现跨域" tabindex="-1">如何实现跨域 <a class="header-anchor" href="#如何实现跨域" aria-label="Permalink to &quot;如何实现跨域&quot;">​</a></h2><h2 id="cookie-、localstorage-、-sessionstrorage-之间有什么区" tabindex="-1">cookie 、localstorage 、 sessionstrorage 之间有什么区 <a class="header-anchor" href="#cookie-、localstorage-、-sessionstrorage-之间有什么区" aria-label="Permalink to &quot;cookie 、localstorage 、 sessionstrorage 之间有什么区&quot;">​</a></h2><p>别？</p><h2 id="http的请求方式有哪些" tabindex="-1">http的请求方式有哪些 <a class="header-anchor" href="#http的请求方式有哪些" aria-label="Permalink to &quot;http的请求方式有哪些&quot;">​</a></h2><h2 id="post和get请求有哪些-区别" tabindex="-1">post和get请求有哪些，区别？ <a class="header-anchor" href="#post和get请求有哪些-区别" aria-label="Permalink to &quot;post和get请求有哪些，区别？&quot;">​</a></h2><h2 id="什么是同源策略" tabindex="-1">什么是同源策略？ <a class="header-anchor" href="#什么是同源策略" aria-label="Permalink to &quot;什么是同源策略？&quot;">​</a></h2><p>所谓同源策略是浏览器的一种安全机制，来限制不同源的网站不能通信。同源就是域名、协议、端口一 致</p><h2 id="http状态码分别代表什么意思-应用场景" tabindex="-1">http状态码分别代表什么意思，应用场景？ <a class="header-anchor" href="#http状态码分别代表什么意思-应用场景" aria-label="Permalink to &quot;http状态码分别代表什么意思，应用场景？&quot;">​</a></h2><h2 id="bfc是什么" tabindex="-1">BFC是什么？ <a class="header-anchor" href="#bfc是什么" aria-label="Permalink to &quot;BFC是什么？&quot;">​</a></h2><p>BFC（会计格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒 子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题。 BFC是值浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布 局，这个渲染区域只对块级元素起作用</p><h2 id="token是什么" tabindex="-1">token是什么 <a class="header-anchor" href="#token是什么" aria-label="Permalink to &quot;token是什么&quot;">​</a></h2><h2 id="一个页面从输入url到页面加载显示完成-这个过程中都发生了什么" tabindex="-1">一个页面从输入URL到页面加载显示完成，这个过程中都发生了什么 <a class="header-anchor" href="#一个页面从输入url到页面加载显示完成-这个过程中都发生了什么" aria-label="Permalink to &quot;一个页面从输入URL到页面加载显示完成，这个过程中都发生了什么&quot;">​</a></h2><h2 id="cookie和session的区别" tabindex="-1">cookie和session的区别 <a class="header-anchor" href="#cookie和session的区别" aria-label="Permalink to &quot;cookie和session的区别&quot;">​</a></h2><h2 id="js本地存储的方式有哪些、区别、应用场景" tabindex="-1">JS本地存储的方式有哪些、区别、应用场景 <a class="header-anchor" href="#js本地存储的方式有哪些、区别、应用场景" aria-label="Permalink to &quot;JS本地存储的方式有哪些、区别、应用场景&quot;">​</a></h2><h2 id="什么是http-http和https的区别" tabindex="-1">什么是HTTP，HTTP和HTTPs的区别 <a class="header-anchor" href="#什么是http-http和https的区别" aria-label="Permalink to &quot;什么是HTTP，HTTP和HTTPs的区别&quot;">​</a></h2><h2 id="http缓存中-强缓存和协商缓存的区别" tabindex="-1">http缓存中，强缓存和协商缓存的区别？ <a class="header-anchor" href="#http缓存中-强缓存和协商缓存的区别" aria-label="Permalink to &quot;http缓存中，强缓存和协商缓存的区别？&quot;">​</a></h2><h2 id="对websocket的理解-应用场景" tabindex="-1">对WebSocket的理解，应用场景？ <a class="header-anchor" href="#对websocket的理解-应用场景" aria-label="Permalink to &quot;对WebSocket的理解，应用场景？&quot;">​</a></h2><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',18),s=[h];function i(l,n,c,d,p,u){return e(),t("div",null,s)}const k=a(r,[["render",i]]);export{_ as __pageData,k as default};
