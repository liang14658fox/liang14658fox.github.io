import{_ as e,o as i,c as l,h as a}from"./app.78065dff.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"自定义指令的设计原则","slug":"自定义指令的设计原则","link":"#自定义指令的设计原则","children":[]},{"level":2,"title":"Vue 2 和 Vue 3 的自定义指令区别","slug":"vue-2-和-vue-3-的自定义指令区别","link":"#vue-2-和-vue-3-的自定义指令区别","children":[{"level":3,"title":"注册方式","slug":"注册方式","link":"#注册方式","children":[]},{"level":3,"title":"指令钩子函数","slug":"指令钩子函数","link":"#指令钩子函数","children":[]},{"level":3,"title":"钩子函数参数","slug":"钩子函数参数","link":"#钩子函数参数","children":[]},{"level":3,"title":"指令修饰符","slug":"指令修饰符","link":"#指令修饰符","children":[]}]},{"level":2,"title":"常见的自定义指令应用场景","slug":"常见的自定义指令应用场景","link":"#常见的自定义指令应用场景","children":[]}],"relativePath":"markdown/directory_4_highlevel/items_1/part_1_vue/list_1/自定义指令.md"}'),t={name:"markdown/directory_4_highlevel/items_1/part_1_vue/list_1/自定义指令.md"},d=a('<h2 id="自定义指令的设计原则" tabindex="-1">自定义指令的设计原则 <a class="header-anchor" href="#自定义指令的设计原则" aria-hidden="true">#</a></h2><h2 id="vue-2-和-vue-3-的自定义指令区别" tabindex="-1">Vue 2 和 Vue 3 的自定义指令区别 <a class="header-anchor" href="#vue-2-和-vue-3-的自定义指令区别" aria-hidden="true">#</a></h2><p>Vue 3 的自定义指令在语法上与 Vue 2 的指令有一些不同，但核心概念和使用方式仍然相似。Vue 3 引入了 Composition API，并对指令的钩子函数进行了更细粒度的划分，提供了更灵活和可控的指令编写方式。以下是 Vue 2 和 Vue 3 的自定义指令之间的主要区别：</p><h3 id="注册方式" tabindex="-1">注册方式 <a class="header-anchor" href="#注册方式" aria-hidden="true">#</a></h3><ul><li>Vue 2：在 Vue 2 中，使用全局的 Vue.directive 方法来注册自定义指令。指令名称作为第一个参数，指令配置对象作为第二个参数。</li><li>Vue 3：在 Vue 3 中，可以使用全局的 app.directive 方法或 directive 函数来注册自定义指令。指令名称作为第一个参数，指令配置对象作为第二个参数。</li></ul><h3 id="指令钩子函数" tabindex="-1">指令钩子函数 <a class="header-anchor" href="#指令钩子函数" aria-hidden="true">#</a></h3><ul><li>Vue 2：Vue 2 的指令钩子函数包括 bind、inserted、update、componentUpdated 和 unbind。这些钩子函数在指令的生命周期中不同的阶段被调用。</li><li>Vue 3：Vue 3 的指令钩子函数包括 beforeMount、mounted、beforeUpdate、updated、beforeUnmount 和 unmounted。这些钩子函数提供了更细粒度的控制，并与组件的生命周期钩子函数保持一致。</li></ul><h3 id="钩子函数参数" tabindex="-1">钩子函数参数 <a class="header-anchor" href="#钩子函数参数" aria-hidden="true">#</a></h3><ul><li>Vue 2：Vue 2 的指令钩子函数的参数包括 el、binding、vnode 和 oldVnode。其中，binding 对象中包含了指令的绑定值、参数、修饰符等信息。</li><li>Vue 3：Vue 3 的指令钩子函数的参数也包括 el、binding、vnode 和 prevVnode。prevVnode 是之前的虚拟节点，用于在更新钩子函数中进行比较。</li></ul><h3 id="指令修饰符" tabindex="-1">指令修饰符 <a class="header-anchor" href="#指令修饰符" aria-hidden="true">#</a></h3><ul><li>Vue 2：Vue 2 的指令修饰符可以通过 v- 前缀使用，例如 v-on:click.stop。Vue 2 提供了一些内置的事件修饰符，如 .stop、.prevent、.capture、.self 等。</li><li>Vue 3：Vue 3 的指令修饰符不再使用 v- 前缀，而是直接在指令后面使用，例如 @click.stop。Vue 3 内置的事件修饰符仍然可用，但要与 @ 符号一起使用。</li></ul><h2 id="常见的自定义指令应用场景" tabindex="-1">常见的自定义指令应用场景 <a class="header-anchor" href="#常见的自定义指令应用场景" aria-hidden="true">#</a></h2><p>...</p>',13),n=[d];function r(u,h,o,s,c,_){return i(),l("div",null,n)}const v=e(t,[["render",r]]);export{p as __pageData,v as default};
