import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.681fc4ae.js";const h=JSON.parse('{"title":"巧用 JS 中的运算符","description":"","frontmatter":{"title":"巧用 JS 中的运算符"},"headers":[],"relativePath":"1_base_JavaScript/封装好的功能/084.巧用JS运算符.md","filePath":"1_base_JavaScript/封装好的功能/084.巧用JS运算符.md"}'),p={name:"1_base_JavaScript/封装好的功能/084.巧用JS运算符.md"},o=l(`<div class="warning custom-block"><p class="custom-block-title">警告</p><p>使用运算符对JS语法进行优化会导致代码可读性降低，请谨慎使用！</p></div><h2 id="_1-其他类型转数字类型" tabindex="-1">1. 其他类型转数字类型 <a class="header-anchor" href="#_1-其他类型转数字类型" aria-label="Permalink to &quot;1. 其他类型转数字类型&quot;">​</a></h2><ol><li>使用单目运算符 <code>+</code>，相当于 <code>Number(target)</code></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">target</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">target</span></span></code></pre></div><p>对于 <code>target</code>，分三种情况：</p><ul><li>当 target 为数字型字符串（大多数情况），则直接转为数字类型</li><li>当 target 为对象类型，底层调用 <code>valueOf</code> 或 <code>toString</code> 方法，假如调用后返回结果为 <code>value</code>，然后再使用 <code>Number(value)</code> 进行转换</li><li>bigint 类型无法转换为 number 类型</li></ul><p>例 1.1</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;3.14&#39;</span><span style="color:#E1E4E8;">, b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;10&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">a) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">b) </span><span style="color:#6A737D;">// 括号可省，空格不可省</span></span>
<span class="line"><span style="color:#6A737D;">// 13.14</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;3.14&#39;</span><span style="color:#24292E;">, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;10&#39;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">a) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b) </span><span style="color:#6A737D;">// 括号可省，空格不可省</span></span>
<span class="line"><span style="color:#6A737D;">// 13.14</span></span></code></pre></div><p>例 1.2</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">arr </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(arr) </span><span style="color:#6A737D;">// 6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">arr </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(arr) </span><span style="color:#6A737D;">// 6</span></span></code></pre></div><h2 id="_2-其他类型转布尔类型" tabindex="-1">2. 其他类型转布尔类型 <a class="header-anchor" href="#_2-其他类型转布尔类型" aria-label="Permalink to &quot;2. 其他类型转布尔类型&quot;">​</a></h2><p>使用 <code>!!</code> 可强制转换为对应的布尔类型，相当于 <code>Boolean()</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">target</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">!!</span><span style="color:#24292E;">target</span></span></code></pre></div><p>根据 JS 中类型转换为布尔类型时是转为 <code>true</code> 还是 <code>false</code>，将 JS 中的类型分为两种：</p><ul><li><code>falsy</code>：布尔转换后的值为 <code>false</code> 的类型</li><li><code>truthy</code>：布尔转换后的值为 <code>true</code> 的类型</li></ul><p>JS 中所有的 <code>falsy</code> 类型一共有 8 个：<code>false</code>、<code>0</code>、<code>-0</code>、<code>0n</code>、<code>&#39;&#39;</code>、<code>NaN</code>、<code>null</code>、<code>undefined</code></p><p>除此之外，其他都是 <code>truthy</code> 类型。</p><h2 id="_3-浮点数取整" tabindex="-1">3. 浮点数取整 <a class="header-anchor" href="#_3-浮点数取整" aria-label="Permalink to &quot;3. 浮点数取整&quot;">​</a></h2><p>我们一般使用以下方法进行取整：</p><ul><li><code>Math.floor()</code>：向下取整</li><li><code>Math.ceil()</code>：向上取整</li><li><code>Math.round()</code>：四舍五入取整</li><li><code>parseInt()</code>：注意参数问题；当数字过大或过小时，有坑，具体见【奇技淫巧】中第 5 节</li></ul><p>使用位运算有更简洁的方法：</p><ol><li><code>x | 0</code></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// -5</span></span>
<span class="line"><span style="color:#79B8FF;">0.19</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// -5</span></span>
<span class="line"><span style="color:#005CC5;">0.19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><ol start="2"><li><code>~~x</code></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~~</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.5</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5.8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// -5</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.15</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~~</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.5</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5.8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// -5</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.15</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><ol start="3"><li><code>x ^ 0</code></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// -3</span></span>
<span class="line"><span style="color:#79B8FF;">0.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">3.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// -3</span></span>
<span class="line"><span style="color:#005CC5;">0.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><ol start="4"><li><code>x &amp; -1</code></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// -3</span></span>
<span class="line"><span style="color:#79B8FF;">0.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">3.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// -3</span></span>
<span class="line"><span style="color:#005CC5;">0.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><p><strong>原理</strong>：计算机中位运算会截断浮点数的小数部分，所以只要找到一个位运算表达式，使得其值仍为原值。<br> 不熟悉位运算的移步：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">MDN 位运算</a></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>由于 JS 中位运算只支持 32 位有符号整数（实际上是 <strong>在进行位运算之前，会被强制转换成 32 位有符号整数，多出的位数会被截断</strong>），因此当要取整的数字不在 <code>[-2^31, 2^31)</code> 范围内，不要使用此类方法。</p></div><p>JS 的数组索引是 32 位置无符号整数，范围为 <code>[0, 2^32)</code>，虽然比位运算的范围大，但基本上不会遇到这么大的索引，因此在数组索引中可以放心使用。</p><h2 id="_4-取半-对折数字" tabindex="-1">4. 取半/对折数字 <a class="header-anchor" href="#_4-取半-对折数字" aria-label="Permalink to &quot;4. 取半/对折数字&quot;">​</a></h2><p>将一个数字进行对半处理（<code>n/2</code>），一般情况下我们都是要整除的结果，例如在二分查找，或者取数组的中间索引的时候。一般都能写出下面的代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> midIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">((low </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> high) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> midIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">((low </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> high) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>但这样看起来复杂很多，使用 <code>x &gt;&gt; 1</code>，可一步代替上述代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> midIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (low </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> high) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> midIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (low </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> high) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>例 4.1</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 5</span></span></code></pre></div><h2 id="_5-判断奇偶" tabindex="-1">5. 判断奇偶 <a class="header-anchor" href="#_5-判断奇偶" aria-label="Permalink to &quot;5. 判断奇偶&quot;">​</a></h2><p>一般情况下，我们使用取余 <code>%</code> 判断：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// n 为奇数</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// n 为奇数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用位运算更简洁（理论上计算速度也比取余快一点）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// n 为奇数</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// n 为奇数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_6-变量互换" tabindex="-1">6. 变量互换 <a class="header-anchor" href="#_6-变量互换" aria-label="Permalink to &quot;6. 变量互换&quot;">​</a></h2><ol><li>常规方法：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x</span></span>
<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> y</span></span>
<span class="line"><span style="color:#E1E4E8;">y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> temp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y</span></span>
<span class="line"><span style="color:#24292E;">y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp</span></span></code></pre></div><ol start="2"><li>解构赋值：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[x, y] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [y, x]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[x, y] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [y, x]</span></span></code></pre></div><ol start="3"><li>位运算实现（仅适用于 32 位有符号整数范围内的数字）</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, n2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">n1 </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> n2</span></span>
<span class="line"><span style="color:#E1E4E8;">n2 </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> n1</span></span>
<span class="line"><span style="color:#E1E4E8;">n1 </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> n2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, n2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">n1 </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> n2</span></span>
<span class="line"><span style="color:#24292E;">n2 </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> n1</span></span>
<span class="line"><span style="color:#24292E;">n1 </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> n2</span></span></code></pre></div><h2 id="_7-2-的-n-次方" tabindex="-1">7. 2 的 n 次方 <a class="header-anchor" href="#_7-2-的-n-次方" aria-label="Permalink to &quot;7. 2 的 n 次方&quot;">​</a></h2><p>常规方法是使用 <code>2 ** n</code> 或 <code>Math.pow(2, n)</code>，也可以使用位运算实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 2 的 n 次方，n &gt;= 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 2 的 n 次方，n &gt;= 1</span></span></code></pre></div><h2 id="_8-短路求值" tabindex="-1">8. 短路求值 <a class="header-anchor" href="#_8-短路求值" aria-label="Permalink to &quot;8. 短路求值&quot;">​</a></h2><p>短路求值（Short-circuit evaluation）在是指一个表达式在计算过程中遇到了满足条件的值（<code>falsy</code> 或 <code>truthy</code>）之后，停止继续向后计算，返回该值。就像电路短路了一样。</p><p>JS 中使用逻辑运算符 <code>&amp;&amp;</code> 和 <code>||</code> 进行短路求值。</p><ol><li><strong>&amp;&amp; 短路求值</strong>：从左到右计算，对每一项进行运算，直到遇到了第一个 <code>falsy</code> 的值，停止向右执行，并返回该值。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">exp1 </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> exp2 </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">exp1 </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> exp2 </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span></code></pre></div><p>例如，下面代码中 <code>res</code> 为 <code>NaN</code>，且 <code>i</code> 为 <code>0</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">++</span></span></code></pre></div><ol start="2"><li><strong>|| 短路求值</strong>：从左到右计算，对每一项进行运算，直到遇到了第一个 <code>truthy</code> 的值，停止向右执行，并返回该值。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">exp1 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> exp2 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">exp1 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> exp2 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span></code></pre></div><p>例如，下面代码中 <code>res</code> 为 <code>0</code>，且 <code>j</code> 为 <code>1</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> j</span><span style="color:#F97583;">++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> j</span><span style="color:#D73A49;">++</span></span></code></pre></div><h2 id="_9-空值合并运算符" tabindex="-1">9. 空值合并运算符 <a class="header-anchor" href="#_9-空值合并运算符" aria-label="Permalink to &quot;9. 空值合并运算符&quot;">​</a></h2><p>ES2020（ES11）新增逻辑运算符 <code>??</code>（空值合并运算符）来判断未定义行为的变量。具体来说：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> b</span></span></code></pre></div><p>对于上述表达式，若 <code>a</code> 为 <code>undefined/null</code>，则返回 <code>b</code>；否则返回 <code>a</code>。</p><p>实际上，<code>??</code> 是一个语法糖，相当于下面这个三元表达式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> undefied </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(a </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> undefied </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> b</span></span></code></pre></div><p><code>??</code> 和 <code>||</code> 的区别：</p><ul><li><code>??</code> 返回第一个定义了的（非null/undefined）的值</li><li><code>||</code> 返回第一个 <code>truthy</code> 类型的值</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p><code>??</code> 不能直接和 <code>&amp;&amp;</code>、<code>||</code> 一起连用，除非使用了括号标明优先级。</p></div><p>例 9.1</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 合法</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &#39;foo&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 合法</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &#39;foo&#39;</span></span></code></pre></div><p>例 9.2 <code>??=</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 给一个变量赋值，若这个变量非 undefine/null 则保持原值</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">foo </span><span style="color:#F97583;">??=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &#39;foo&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 给一个变量赋值，若这个变量非 undefine/null 则保持原值</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">??=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &#39;foo&#39;</span></span></code></pre></div><h2 id="_10-可选链" tabindex="-1">10. 可选链 <a class="header-anchor" href="#_10-可选链" aria-label="Permalink to &quot;10. 可选链&quot;">​</a></h2><p>可选链 <code>?.</code> 是一种访问嵌套对象属性的安全的方式。即使中间的属性不存在，也不会出现错误，而是返回 <code>undefined</code>。</p><p>三种形式：<code>obj?.prop</code>、<code>obj?.[&#39;prop&#39;]</code>、<code>obj.method?.()</code></p><ol><li>访问对象属性</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 若用户未设置性别，默认为 male</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user?.info?.sex </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;male&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 若用户未设置性别，默认为 male</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user?.info?.sex </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;male&#39;</span></span></code></pre></div><p>上述代码等价于：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user?.[</span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">]?.[</span><span style="color:#9ECBFF;">&#39;sex&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;male&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user?.[</span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">]?.[</span><span style="color:#032F62;">&#39;sex&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;male&#39;</span></span></code></pre></div><ol start="2"><li>执行函数</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">?.() </span><span style="color:#6A737D;">// 不报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">?.() </span><span style="color:#6A737D;">// 不报错</span></span></code></pre></div><p>实际上，<code>a?.b?.c</code> 等价于 <code>a.b &amp;&amp; a.b.c</code>，更简洁。</p><p>Vue3 源码里，尤雨溪没用使用可选链 <code>?.</code>，而是使用了 <code>&amp;&amp;</code>。原因是 <code>?.</code> 编译后的代码比 <code>&amp;&amp;</code> 多出不少。考虑到要尽量减少依赖包的大小，没用使用可选链。尤大是从开源角度考虑的，语法糖本就是为了方便开发者，所以是否使用看你自己了。</p><h2 id="_11-逗号运算符" tabindex="-1">11. 逗号运算符 <a class="header-anchor" href="#_11-逗号运算符" aria-label="Permalink to &quot;11. 逗号运算符&quot;">​</a></h2><p>逗号操作符，对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</p><p>例 11.1</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> j, i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// res:1, i:2, j:2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> j, i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// res:1, i:2, j:2</span></span></code></pre></div><p>例 11.2 交换数组中指定项的值，并返回两数之和</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">j</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    [arr[i], arr[j]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [arr[j], arr[i]], </span><span style="color:#6A737D;">// 交换两值</span></span>
<span class="line"><span style="color:#E1E4E8;">    arr[i] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> arr[j] </span><span style="color:#6A737D;">// 返回两数之和</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, </span><span style="color:#E36209;">j</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    [arr[i], arr[j]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[j], arr[i]], </span><span style="color:#6A737D;">// 交换两值</span></span>
<span class="line"><span style="color:#24292E;">    arr[i] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> arr[j] </span><span style="color:#6A737D;">// 返回两数之和</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_12-数值分割符号" tabindex="-1">12. 数值分割符号 <a class="header-anchor" href="#_12-数值分割符号" aria-label="Permalink to &quot;12. 数值分割符号&quot;">​</a></h2><blockquote><p>严格上不算操作符了。</p></blockquote><p>ES2021 引入下划线 <code>_</code> 可以对数字（整数和浮点数）进行分割，提高可读性，在十进制、二进制、十六等各种进制以及 <code>BigInt</code> 中都可以使用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">10_000_000</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 等价于 10000000</span></span>
<span class="line"><span style="color:#79B8FF;">0b1100_1010</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 等价于 0b11001010</span></span>
<span class="line"><span style="color:#79B8FF;">0xFFFF_FFFF</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 等价于 0xFFFFFFFF</span></span>
<span class="line"><span style="color:#79B8FF;">9_999_999_999</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 等价于 9999999999n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">10_000_000</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 等价于 10000000</span></span>
<span class="line"><span style="color:#005CC5;">0b1100_1010</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 等价于 0b11001010</span></span>
<span class="line"><span style="color:#005CC5;">0xFFFF_FFFF</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 等价于 0xFFFFFFFF</span></span>
<span class="line"><span style="color:#005CC5;">9_999_999_999</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 等价于 9999999999n</span></span></code></pre></div>`,99),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const g=s(p,[["render",c]]);export{h as __pageData,g as default};
