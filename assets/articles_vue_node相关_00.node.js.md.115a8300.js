import{_ as e,o as l,c as i,a as o}from"./app.2c4ad0bc.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"node是什么：","slug":"node是什么","link":"#node是什么","children":[]},{"level":2,"title":"commonJS是什么？","slug":"commonjs是什么","link":"#commonjs是什么","children":[]},{"level":2,"title":"package 包:","slug":"package-包","link":"#package-包","children":[]},{"level":2,"title":"NPM 是什么:","slug":"npm-是什么","link":"#npm-是什么","children":[]},{"level":2,"title":"Node 中的 fs 文件系统：","slug":"node-中的-fs-文件系统","link":"#node-中的-fs-文件系统","children":[]},{"level":2,"title":"数据库是什么：","slug":"数据库是什么","link":"#数据库是什么","children":[{"level":3,"title":"1.3 数据库的分类","slug":"_1-3-数据库的分类","link":"#_1-3-数据库的分类","children":[]}]},{"level":2,"title":"1.3.1 关系型数据库（RDBS）：","slug":"_1-3-1-关系型数据库-rdbs","link":"#_1-3-1-关系型数据库-rdbs","children":[]},{"level":2,"title":"1.3.2 非关系型数据库（NoSQL）：","slug":"_1-3-2-非关系型数据库-nosql","link":"#_1-3-2-非关系型数据库-nosql","children":[]},{"level":2,"title":"MongoDB 简介：","slug":"mongodb-简介","link":"#mongodb-简介","children":[]},{"level":2,"title":"Mongoose:","slug":"mongoose","link":"#mongoose","children":[]},{"level":2,"title":"Node.js技术栈：","slug":"node-js技术栈","link":"#node-js技术栈","children":[]},{"level":2,"title":"Node项目的目录结构及功能-1：","slug":"node项目的目录结构及功能-1","link":"#node项目的目录结构及功能-1","children":[]},{"level":2,"title":"Node.js中的模块主要包括：","slug":"node-js中的模块主要包括","link":"#node-js中的模块主要包括","children":[]},{"level":2,"title":"Node项目的目录结构及功能-2：","slug":"node项目的目录结构及功能-2","link":"#node项目的目录结构及功能-2","children":[]}],"relativePath":"articles/vue/node相关/00.node.js.md"}'),a={name:"articles/vue/node相关/00.node.js.md"},n=o('<h2 id="node是什么" tabindex="-1">node是什么： <a class="header-anchor" href="#node是什么" aria-hidden="true">#</a></h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p><ul><li>node应用场景：</li></ul><p>Web服务API，比如RESTful API（本身没有太多的逻辑，只需要请求API，组织数据进行返回即可） 服务器渲染页面，提升速度 后端的 Web 服务，例如跨域、服务器端的请求</p><ul><li>浏览器端的 JS 由三部分组成：</li></ul><p>BOM DOM ECMAScript</p><ul><li>Node端的 JS：</li></ul><p>没有 BOM，因为服务器不需要 没有 DOM，因为没有浏览器窗口，也就没有文档对象模型 几乎包含了所有的 ES 规范 没有 window 对象，取而代之的是一个叫 global 的全局变量 在 Node 中禁止函数的 this 指向 global，所以执行 console.log(this) 的结果为 {}</p><h2 id="commonjs是什么" tabindex="-1">commonJS是什么？ <a class="header-anchor" href="#commonjs是什么" aria-hidden="true">#</a></h2><p>CommonJS是一种JavaScript模块化规范，用于定义 JavaScript 的模块化编程。</p><ul><li>commonJS的性质是什么？</li></ul><p>它以同步的方式加载模块，使用 require() 函数加载模块，通过 module.exports 或 exports 对外暴露接口。</p><ul><li>commonJS有什么用？</li></ul><p>它实现了模块的加载机制，使编写的代码可以复用，减少了重复劳动。</p><ul><li>commonJS属于什么技术栈？</li></ul><p>CommonJS是Node.js服务端技术栈中的重要一环，它增强了Node.js的模块化能力，让Node.js在服务端发挥出更大的作用。</p><ul><li>module.exports是什么？</li></ul><p>module.exports是CommonJS模块化规范中的一个重要特性。</p><ul><li>module.exports的性质是什么？</li></ul><p>它的性质是一个对象，用来导出模块的接口，有助于模块的复用和重复利用。</p><ul><li>module.exports有什么用？</li></ul><p>module.exports的用途是将模块内定义的方法和变量导出，从而让其他文件可以使用。</p><ul><li>module.exports属于什么技术栈？</li></ul><p>它属于Node.js服务端技术栈中的重要一环，增强了Node.js的模块化能力，让Node.js在服务端发挥出更大的作用。</p><h2 id="package-包" tabindex="-1">package 包: <a class="header-anchor" href="#package-包" aria-hidden="true">#</a></h2><p>Node.js 的包基本遵循 CommonJS 规范，包将一组相关的模块组合在一起，形成一组完整的工具。 包由包结构和包描述文件两个部分组成。</p><ul><li>包结构：</li></ul><p>用于组织包中的各种文件</p><ul><li>包描述文件：</li></ul><p>描述包的相关信息，以供外部读取分析, 包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件：package.json</p><h2 id="npm-是什么" tabindex="-1">NPM 是什么: <a class="header-anchor" href="#npm-是什么" aria-hidden="true">#</a></h2><p>全称：Node Package Manager，Node 的包管理器。</p><ul><li>NPM 与 Node 的关系：</li></ul><p>安装 node 后自动安装 npm（npm是node官方出的包管理器，专门用于管理包）</p><ul><li>NPM 能干什么：</li></ul><p>通过 NPM 可以对 Node 的包进行搜索、下载、安装、删除、上传。</p><ul><li>Yarn：</li></ul><p>Yarn发布于2016年10月，截至当前2019年1月，gitHub上的Start数量为：34.3k，已经超过npm很多了， yarn使用本地缓存，有时甚至无需互联网连接就能安装本地已经缓存过的依赖项。</p><h2 id="node-中的-fs-文件系统" tabindex="-1">Node 中的 fs 文件系统： <a class="header-anchor" href="#node-中的-fs-文件系统" aria-hidden="true">#</a></h2><p>在 Node 中有一个文件系统，所谓的文件系统，就是对计算机中的文件进行增删改查等操作。 在 NodeJs 中，给我们提供了一个模块，叫做fs模块(文件系统)，专门用于操作文件。 fs模块是 Node 的核心模块，使用的时候，无需下载，直接引入。</p><h2 id="数据库是什么" tabindex="-1">数据库是什么： <a class="header-anchor" href="#数据库是什么" aria-hidden="true">#</a></h2><p>数据库（DataBase）是按照数据结构来组织、存储和管理数据的仓库。</p><h3 id="_1-3-数据库的分类" tabindex="-1">1.3 数据库的分类 <a class="header-anchor" href="#_1-3-数据库的分类" aria-hidden="true">#</a></h3><h2 id="_1-3-1-关系型数据库-rdbs" tabindex="-1">1.3.1 关系型数据库（RDBS）： <a class="header-anchor" href="#_1-3-1-关系型数据库-rdbs" aria-hidden="true">#</a></h2><ul><li>代表有：</li></ul><p>MySQL、Oracle、DB2、SQL Server...</p><ul><li>特点：</li></ul><p>关系紧密，表结构</p><ul><li>优点：</li></ul><p>易于维护：都是使用表结构，格式一致； 使用方便：SQL 结构化查询通用，可用于复杂查询； 高级查询：可用于一个表以及多个表之间非常复杂的查询。</p><ul><li>缺点：</li></ul><p>读写性能比较差，尤其是海量数据的高效率读写； 有固定的表结构，字段不可随意更改，灵活度稍欠； 高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈。</p><h2 id="_1-3-2-非关系型数据库-nosql" tabindex="-1">1.3.2 非关系型数据库（NoSQL）： <a class="header-anchor" href="#_1-3-2-非关系型数据库-nosql" aria-hidden="true">#</a></h2><ul><li>代表有：</li></ul><p>MongoDB、Redis...</p><ul><li>特点：</li></ul><p>关系不紧密，文档存储，有键值对</p><ul><li>优点：</li></ul><p>格式灵活：存储数据的格式可以是key,value形式。 速度快：nosql可以内存作为载体，而关系型数据库只能使用硬盘； 易用：nosql数据库部署简单。</p><ul><li>缺点：</li></ul><p>不支持sql，学习和使用成本较高； 不支持事务； 复杂查询时语句过于繁琐。</p><h2 id="mongodb-简介" tabindex="-1">MongoDB 简介： <a class="header-anchor" href="#mongodb-简介" aria-hidden="true">#</a></h2><p>MongoDB 是为 快速开发互联网 Web 应用而设计的数据库系统。 MongoDB 的设计目标是极简、灵活、作为Web应用栈的一部分。 MongoDB 的数据模型是面向文档的，所谓文档是一种类似于 JSON 的结构，简单理解 MongoDB 这个数据库中存的是各种各样的JSON。（BSON） MongoDB 图形化工具： Studio 3T Navicat</p><ul><li>MongoDB 原生 CRUD（增删改查）:</li></ul><h2 id="mongoose" tabindex="-1">Mongoose: <a class="header-anchor" href="#mongoose" aria-hidden="true">#</a></h2><p>Mongoose是一个对象文档模型（ODM）库，它对Node原生的MongoDB模块进行了进一步的优化封装，并提供了更多的功能。</p><ul><li>Buffer 缓冲器：</li></ul><h2 id="node-js技术栈" tabindex="-1">Node.js技术栈： <a class="header-anchor" href="#node-js技术栈" aria-hidden="true">#</a></h2><ol><li><p>Node.js：是一个基于Chrome V8引擎的JavaScript运行环境，使用事件驱动、非阻塞式I/O的模型，为JavaScript脚本设计的平台。</p></li><li><p>Express：是一个基于Node.js开发的Web应用开发框架。它提供了一系列强大的特性，例如路由、模板引擎、数据库抽象层等，帮助开发者更方便地完成各种Web应用。</p></li><li><p>MongoDB：是一个专为Web应用准备的NoSQL数据库。它提供了一系列强大的功能，例如文档存储、查询、聚合、复制等，帮助开发者更快地完成各种Web应用。</p></li><li><p><a href="http://Socket.io" target="_blank" rel="noreferrer">Socket.io</a>：是一个基于Node.js的实时应用框架，通过使用Websocket技术，可以实现服务器端与客户端的即时通信。</p></li></ol><h2 id="node项目的目录结构及功能-1" tabindex="-1">Node项目的目录结构及功能-1： <a class="header-anchor" href="#node项目的目录结构及功能-1" aria-hidden="true">#</a></h2><ol><li><p>bin：用来存放可执行文件，例如www（应用服务器入口文件）、npm（npm命令）等。</p></li><li><p>config：用来存放应用的配置文件，例如database.js（数据库连接配置文件）、routes.js（路由配置文件）等。</p></li><li><p>lib：存放应用的公共模块文件，例如logger.js（日志模块文件）、utils.js（工具模块文件）等。</p></li><li><p>public：存放静态资源文件，例如html、css、js、images等。</p></li><li><p>routes：用来存放路由文件，例如index.js（首页路由）、user.js（用户路由）等。</p></li><li><p>views：用来存放模板文件，例如index.ejs（首页模板）、user.ejs（用户模板）等。</p></li><li><p>models：存放数据模型文件，用于操作数据库。</p></li><li><p>app.js：应用的入口文件，用来加载所有的配置文件和模块文件，并启动应用服务器。</p></li><li><p>package.json：存放开发项目的信息，例如项目名称、版本号、作者、描述等，以及依赖的Node模块列表等。</p></li></ol><h2 id="node-js中的模块主要包括" tabindex="-1">Node.js中的模块主要包括： <a class="header-anchor" href="#node-js中的模块主要包括" aria-hidden="true">#</a></h2><ol><li><p>HTTP模块：用于创建服务器和对HTTP请求和响应进行处理。</p></li><li><p>File System模块：用于读取文件和目录，创建文件和目录，修改文件和目录的权限，移动文件和目录，删除文件和目录等。</p></li><li><p>Path模块：用于解析文件路径和转换文件路径。</p></li><li><p>Stream模块：用于创建流对象，并对数据流进行操作。</p></li><li><p>Net模块：用于创建TCP/IP客户端和服务器程序。</p></li><li><p>DNS模块：用于解析域名。</p></li><li><p>Child Processes模块：用于创建子进程。</p></li><li><p>Events模块：用于监听和触发事件。</p></li><li><p>Crypto模块：用于加密和解密数据。</p></li><li><p>Buffer模块：用于处理二进制数据。</p></li></ol><h2 id="node项目的目录结构及功能-2" tabindex="-1">Node项目的目录结构及功能-2： <a class="header-anchor" href="#node项目的目录结构及功能-2" aria-hidden="true">#</a></h2><ol><li><p>bin：存放可执行文件，用于启动应用服务器。</p></li><li><p>config：项目的配置文件，包括数据库连接配置、第三方接口配置等。</p></li><li><p>lib：存放项目的核心代码文件，包括路由文件、控制器文件等。</p></li><li><p>models：存放数据模型文件，用于操作数据库。</p></li><li><p>public：存放静态资源文件，包括css、js、图片等。</p></li><li><p>routes：存放路由文件，用于处理HTTP请求。</p></li><li><p>views：存放显示页面文件，一般是html文件。</p></li><li><p>app.js：应用的入口文件，用来加载所有的配置文件和模块文件，并启动应用服务器。</p></li><li><p>package.json：存放开发项目的信息，例如项目名称、版本号、作者、描述等，以及依赖的Node模块列表等。</p></li></ol>',75),d=[n];function p(s,r,t,h,u,c){return l(),i("div",null,d)}const N=e(a,[["render",p]]);export{g as __pageData,N as default};
