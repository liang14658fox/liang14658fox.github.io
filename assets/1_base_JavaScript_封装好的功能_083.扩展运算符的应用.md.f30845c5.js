import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.681fc4ae.js";const A=JSON.parse('{"title":"扩展运算符的应用","description":"","frontmatter":{"title":"扩展运算符的应用"},"headers":[],"relativePath":"1_base_JavaScript/封装好的功能/083.扩展运算符的应用.md","filePath":"1_base_JavaScript/封装好的功能/083.扩展运算符的应用.md"}'),p={name:"1_base_JavaScript/封装好的功能/083.扩展运算符的应用.md"},o=l(`<h2 id="_1-数组去重" tabindex="-1">1. 数组去重 <a class="header-anchor" href="#_1-数组去重" aria-label="Permalink to &quot;1. 数组去重&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> setArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(arr)            </span><span style="color:#6A737D;">// 返回set数据结构Set(3) {3, 5, 2} </span></span>
<span class="line"><span style="color:#6A737D;">//方法一 es6的...解构 </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> unique1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">setArr ];          </span><span style="color:#6A737D;">//去重转数组后 [3,5,2] </span></span>
<span class="line"><span style="color:#6A737D;">//方法二 Array.from()解析类数组为数组 </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> unique2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(setArr )    </span><span style="color:#6A737D;">//去重转数组后 [3,5,2]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]; </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> setArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr)            </span><span style="color:#6A737D;">// 返回set数据结构Set(3) {3, 5, 2} </span></span>
<span class="line"><span style="color:#6A737D;">//方法一 es6的...解构 </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> unique1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">setArr ];          </span><span style="color:#6A737D;">//去重转数组后 [3,5,2] </span></span>
<span class="line"><span style="color:#6A737D;">//方法二 Array.from()解析类数组为数组 </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> unique2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(setArr )    </span><span style="color:#6A737D;">//去重转数组后 [3,5,2]</span></span></code></pre></div><h2 id="_2-字符串去重" tabindex="-1">2. 字符串去重 <a class="header-anchor" href="#_2-字符串去重" aria-label="Permalink to &quot;2. 字符串去重&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;352255&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> unique </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(str)].</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 352</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;352255&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> unique </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(str)].</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 352</span></span></code></pre></div><h2 id="_3-实现并集、交集、和差集" tabindex="-1">3. 实现并集、交集、和差集 <a class="header-anchor" href="#_3-实现并集、交集、和差集" aria-label="Permalink to &quot;3. 实现并集、交集、和差集&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#6A737D;">// 并集 </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> union </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">a, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">b]); </span><span style="color:#6A737D;">// Set {1, 2, 3, 4} </span></span>
<span class="line"><span style="color:#6A737D;">// 交集 </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> intersect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">a].</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(x))); </span><span style="color:#6A737D;">// set {2, 3} </span></span>
<span class="line"><span style="color:#6A737D;">// （a 相对于 b 的）差集 </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> difference </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">a].</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">b.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(x))); </span><span style="color:#6A737D;">// Set {1}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#6A737D;">// 并集 </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> union </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">a, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">b]); </span><span style="color:#6A737D;">// Set {1, 2, 3, 4} </span></span>
<span class="line"><span style="color:#6A737D;">// 交集 </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> intersect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">a].</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(x))); </span><span style="color:#6A737D;">// set {2, 3} </span></span>
<span class="line"><span style="color:#6A737D;">// （a 相对于 b 的）差集 </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> difference </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">a].</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(x))); </span><span style="color:#6A737D;">// Set {1}</span></span></code></pre></div><h2 id="_4-将伪数组转化为数组" tabindex="-1">4. 将伪数组转化为数组 <a class="header-anchor" href="#_4-将伪数组转化为数组" aria-label="Permalink to &quot;4. 将伪数组转化为数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//伪数组转换为数组</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nodeList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelectorAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">nodeList]);  </span><span style="color:#6A737D;">// [div, div, div ... ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//伪数组转换为数组</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nodeList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">nodeList]);  </span><span style="color:#6A737D;">// [div, div, div ... ]</span></span></code></pre></div><h2 id="_5-配合rest-运算符应用" tabindex="-1">5. 配合rest 运算符应用 <a class="header-anchor" href="#_5-配合rest-运算符应用" aria-label="Permalink to &quot;5. 配合rest 运算符应用&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sumRest</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> m){</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sumRest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span><span style="color:#6A737D;">//6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sumRest</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> m){</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">sumRest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">//6</span></span></code></pre></div><h2 id="_6-数组排序" tabindex="-1">6. 数组排序 <a class="header-anchor" href="#_6-数组排序" aria-label="Permalink to &quot;6. 数组排序&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sortNumbers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">numbers</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> numbers.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sortNumbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">numbers</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> numbers.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">();</span></span></code></pre></div>`,12),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
