import{_ as n,o as p,c as l,k as s,a as o,t as e,Q as t}from"./chunks/framework.681fc4ae.js";const c="/image-20221106204732992.png",B=JSON.parse('{"title":"vitepress自动生成目录","description":"","frontmatter":{"title":"vitepress自动生成目录"},"headers":[],"relativePath":"8rush/Vitepress/020.vitepress自动生成目录.md","filePath":"8rush/Vitepress/020.vitepress自动生成目录.md"}'),r={name:"8rush/Vitepress/020.vitepress自动生成目录.md"},E=s("div",{class:"danger custom-block"},[s("p",{class:"custom-block-title"},"DANGER"),s("p",null,"vitepress新版本的configs为ts类型，不支持path")],-1),y={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),d=t(`<p>上一节我们将自己的网站发布到了git pages上，但是现在我们需要每次更新一篇文章就重写一次目录，操作上十分的繁琐和不方便，所以我们需要一个方法去自动生成我们的侧边栏结构，方便我们每次只需要更新我们的项目即可。这里我们要知道一个点：</p><p>因为 VitePress 应用在生成静态构建时是通过 Node.js 服务端渲染的，所以我们可以使用Node.js的相关函数来获取我们的目录结构，再通过目录结构来生成我们的目录。</p><p>基于React的 <code>Docusaurus2.0</code> 不需要进行该项配置，因为其作者已经封装了自动生成目录功能。</p><h2 id="获取目录结构" tabindex="-1">获取目录结构 <a class="header-anchor" href="#获取目录结构" aria-label="Permalink to &quot;获取目录结构&quot;">​</a></h2><p>首先我们引入node的path模块</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>通过使用如下的函数获取指定目录下的文件结构，比如下面的例子是获取articles的other文件夹下面的结构</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;../articles/other&quot;</span><span style="color:#E1E4E8;">),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;../articles/other&quot;</span><span style="color:#24292E;">),</span></span></code></pre></div><p>之后我们引入directory-tree这个库（需要先npm安装），他会帮我们把传入的目录下的文件解析的指定的格式方便我们处理，同时处理时我们仅需要留下md格式的文件即可，所以我们配置extensions过滤文件格式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">srcDir</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dirTree</span><span style="color:#E1E4E8;">(srcPath, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    extensions:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">md</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    normalizePath: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">srcDir</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dirTree</span><span style="color:#24292E;">(srcPath, {</span></span>
<span class="line"><span style="color:#24292E;">    extensions:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">md</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    normalizePath: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>我们在控制台打印一下，可以看到，解析后我们的得到的数据是这样的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;C:/Users/10168/Desktop/learn/vitepress/aiai0603.github.io/docs/articles/other&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;other&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">children</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      path: </span><span style="color:#9ECBFF;">&#39;C:/Users/10168/Desktop/learn/vitepress/aiai0603.github.io/docs/articles/other/vitepress&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;vitepress&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      children: [Array]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;C:/Users/10168/Desktop/learn/vitepress/aiai0603.github.io/docs/articles/other&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;other&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">children</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      path: </span><span style="color:#032F62;">&#39;C:/Users/10168/Desktop/learn/vitepress/aiai0603.github.io/docs/articles/other/vitepress&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;vitepress&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      children: [Array]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="生成侧边栏" tabindex="-1">生成侧边栏 <a class="header-anchor" href="#生成侧边栏" aria-label="Permalink to &quot;生成侧边栏&quot;">​</a></h2><p>我们需要的是other这个文件夹下面的部分。但是我们不知道他有几个子文件夹，所以我们需要通过一个递归函数来解决这个问题：这个函数的逻辑是这样的，首先做类型校验，我们需要传入一个数组（必须是数组，否则就乱了），之后判断数组的每一项是不是有children属性，那么把它的children传入继续递归，并且设置其菜单的其他属性（比如能否展开等）；如果没有，那么其可能是空的文件夹或者md文件，使用函数将可能是md文件的.md结尾去掉，再将路径path从docs开始截断（注意路径是从docs文件夹开始写的绝对路径，不能写成是相对路径的方式），传入link属性中，作为我们的访问路径。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toSidebarOption</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(tree)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tree.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (v.children </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        text: v.name,</span></span>
<span class="line"><span style="color:#E1E4E8;">        collapsible: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        collapsed: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        items: </span><span style="color:#B392F0;">toSidebarOption</span><span style="color:#E1E4E8;">(v.children),</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        text: v.name.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.md&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        link: v.path.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;docs&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.md&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toSidebarOption</span><span style="color:#24292E;">(</span><span style="color:#E36209;">tree</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(tree)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tree.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">v</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (v.children </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        text: v.name,</span></span>
<span class="line"><span style="color:#24292E;">        collapsible: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        collapsed: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        items: </span><span style="color:#6F42C1;">toSidebarOption</span><span style="color:#24292E;">(v.children),</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        text: v.name.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.md&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        link: v.path.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;docs&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.md&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个时候注意到一个问题，比如说我的文件夹叫做a，但是我希望在侧边栏中，它叫做b，怎么办，很简单，我们稍微修改一下我们的传入函数，拓展它自定义目录名称的能力就行了，设置title属性，如果我们传入的title那么我们按照title生成目录，最后的函数如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">autoGetSidebarOptionBySrcDir</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">srcPath</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">srcDir</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dirTree</span><span style="color:#E1E4E8;">(srcPath, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    extensions:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">md</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    normalizePath: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      text: title </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">  srcDir.name </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> title ,</span></span>
<span class="line"><span style="color:#E1E4E8;">      collapsible: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      collapsed: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      items: </span><span style="color:#B392F0;">toSidebarOption</span><span style="color:#E1E4E8;">(srcDir.children),</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">autoGetSidebarOptionBySrcDir</span><span style="color:#24292E;">(</span><span style="color:#E36209;">srcPath</span><span style="color:#24292E;">, </span><span style="color:#E36209;">title</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">srcDir</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dirTree</span><span style="color:#24292E;">(srcPath, {</span></span>
<span class="line"><span style="color:#24292E;">    extensions:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">md</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    normalizePath: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      text: title </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">  srcDir.name </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> title ,</span></span>
<span class="line"><span style="color:#24292E;">      collapsible: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      collapsed: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      items: </span><span style="color:#6F42C1;">toSidebarOption</span><span style="color:#24292E;">(srcDir.children),</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="调用函数" tabindex="-1">调用函数 <a class="header-anchor" href="#调用函数" aria-label="Permalink to &quot;调用函数&quot;">​</a></h2><p>我们将写好的两个函数放在一个文件里，然后导出模块，在config.js里引用它，我们就可以用它配置侧边栏，比如说，我们通过如下的调用形式就把&quot;/articles/basic&quot;的侧边栏配置好了：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sidebar</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;/articles/basic&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">autoGetSidebarOptionBySrcDir</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;../articles/basic&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;基础课&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ),</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sidebar</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;/articles/basic&quot;</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">autoGetSidebarOptionBySrcDir</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;../articles/basic&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;基础课&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ),</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>当然如果你的侧边栏中有多个项的话，比如说你在other下面想放上多个文件夹，那么使用concat来连接数组就行了,比如下面这样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">autoGetSidebarOptionBySrcDir</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;../articles/basic&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;基础课&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ).</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">autoGetSidebarOptionBySrcDir</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;../articles/basic&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;基础课&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">autoGetSidebarOptionBySrcDir</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;../articles/basic&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;基础课&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ).</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">autoGetSidebarOptionBySrcDir</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;../articles/basic&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;基础课&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ))</span></span></code></pre></div><p>ok，我们来看看效果，这是用我们的函数生成侧边栏：</p><p><img src="`+c+'" alt="image-20221106204732992"></p><p>这样编写的好处在于：</p><ol><li><p>我们可以更新后让系统自动给我们配置目录</p></li><li><p>同时你也可以把资料放在不同的位置但是生成在一个侧边下方，完全根据你的喜好来配置</p></li></ol><p>当然这个demo也有不足，完整的DEMO在我的github中，</p><p>可以访问 <a href="https://github.com/aiai0603/aiai0603.github.io" target="_blank" rel="noreferrer">https://github.com/aiai0603/aiai0603.github.io</a> 来获取</p><p>在下一篇中我将讲述这么在vitepress中引入vue的内容，敬请关注</p>',29);function F(a,u,h,C,v,b){return p(),l("div",null,[E,s("h1",y,[o(e(a.$frontmatter.title)+" ",1),i]),d])}const m=n(r,[["render",F]]);export{B as __pageData,m as default};
