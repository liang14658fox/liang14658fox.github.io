import{_ as e,o as i,c as t,a}from"./app.82e072de.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. webpack","slug":"_1-webpack","link":"#_1-webpack","children":[]},{"level":2,"title":"2. Vite","slug":"_2-vite","link":"#_2-vite","children":[]},{"level":2,"title":"3. Vite的优点","slug":"_3-vite的优点","link":"#_3-vite的优点","children":[]}],"relativePath":"articles/vite/与webpack区别/02.webpack与vite.md"}'),p={name:"articles/vite/与webpack区别/02.webpack与vite.md"},l=a('<h2 id="_1-webpack" tabindex="-1">1. webpack <a class="header-anchor" href="#_1-webpack" aria-hidden="true">#</a></h2><p>Webpack 会遍历你的应用程序中的所有文件，并将代码转换成开发服务器，Webpack 将整个代码渲染到一个开发环境中。</p><p>webpack从一个entry.js文件开始，将其依赖的所有js或者其他assets通过loader打包成一个的文件， 随后这个打包后的文件将被从server传递到客户端浏览器运行。</p><p>因为这样处理规则，当保存文件时，整个 JavaScript 包将由 Webpack 重新构建，这就是为什么更改可能需要长达 10 秒才能反映在浏览器中，更新速度会随着应用体积增长而直线下降。</p><h2 id="_2-vite" tabindex="-1">2. Vite <a class="header-anchor" href="#_2-vite" aria-hidden="true">#</a></h2><p>Vite 的工作方式不同，它不会遍历整个应用程序，Vite 只是转换当时正在使用的文件/模块。</p><p>Vite的核心理念：非打包开发构建</p><p>Vite 的核心思想：浏览器请求它时，使用 ES 模块转换并提供一段应用程序代码。</p><p>开始开发构建时，Vite将首先将的JavaScript 模块分为两类：依赖模块和源码模块。</p><p>依赖项模块是第三方依赖的代码，从node_modules文件夹中导入的JavaScript 模块。这些模块将使用esbuild进行处理和捆绑，esbuild是一个用 Go 编写的 JavaScript 打包工具，执行速度比 Webpack 快 10-100 倍。</p><p>源码模块是源代码，即业务代码，通常涉及特定库的扩展，如、.jsx或.vue文件.scss。</p><p>它使用基于路由的代码拆分来了解代码的哪些部分实际需要加载，因此，它不必重新打包所有内容。</p><p>它还使用现代浏览器中的原生 ES 模块支持来交付代码，这让浏览器可以在开发中承担打包工作。</p><p>在生产方面，虽然现在所有主流浏览器都支持原生 ES 模块，但它实现了诸如 tree-shaking、延迟加载和通用块拆分等性能优化技术，仍然比非打包应用程序带来更好的整体性能。出于这个原因，Vite附带了一个预先配置的build命令，该命令使用Rollup打包来打包和实现各种性能优化。</p><p>Webpack 这样的基于打包器的工作流必须在单个浏览器请求之前处理整个 JavaScript 模块，但 Vite 只在单个浏览器请求之前处理依赖模块。这就是为什么 Vite 能够比 Webpack 更快地处理开发构建。</p><h2 id="_3-vite的优点" tabindex="-1">3. Vite的优点 <a class="header-anchor" href="#_3-vite的优点" aria-hidden="true">#</a></h2><ul><li>极速的服务启动</li></ul><p>使用原生 ESM 文件，无需打包!</p><ul><li>轻量快速的热重载</li></ul><p>无论应用程序大小如何，都始终极快的模块热重载（HMR）</p><ul><li>丰富的功能</li></ul><p>对 TypeScript、JSX、CSS 等支持开箱即用</p><ul><li>优化的构建</li></ul><p>可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建</p><ul><li>通用的插件</li></ul><p>在开发和构建之间共享 Rollup-superset 插件接口</p><ul><li>完全类型化的API</li></ul><p>灵活的 API 和完整 TypeScript 类型</p>',28),c=[l];function r(s,_,d,n,o,u){return i(),t("div",null,c)}const b=e(p,[["render",r]]);export{v as __pageData,b as default};
