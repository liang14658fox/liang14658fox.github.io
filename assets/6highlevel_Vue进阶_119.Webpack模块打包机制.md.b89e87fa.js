import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.681fc4ae.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"6highlevel/Vue进阶/119.Webpack模块打包机制.md","filePath":"6highlevel/Vue进阶/119.Webpack模块打包机制.md"}'),l={name:"6highlevel/Vue进阶/119.Webpack模块打包机制.md"},o=p(`<p>在官方定义中，Webpack 是一个现代 JavaScript 应用静态模块打包器。它统一了 JavaScript 在发展过程中出现的各种模块化方案，我们可以认为 Webpack 是 JavaScript 模块化的统一解决方案。 如果有对 JavaScript 各种模块化方案还不是很了解的小伙伴，建议阅读《JavaScript 模块的发展史》。 在 Webpack 对源代码的编译过程中，包含了一个模块打包的工作，其实就是 Webpack 从入口文件开始，逐级地将源代码中各个模块的依赖关系分析出来，输入最终的打包文件。 接下来让我们以 CommonJS 和 ES6 的模块机制为例，来更深入地理解 Webpack 的模块打包机制。 如下 webpack.config.js 的简单配置，在下述例子中，都是以该配置为准的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode:</span><span style="color:#9ECBFF;">&#39;development&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;bundle.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  mode:</span><span style="color:#032F62;">&#39;development&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>CommonJS 在 CommonJS 的模块机制中，使用 require 引入模块，module.exports/exports 输出模块。 模块文件 bar.js 和入口文件 index.js 分别如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/bar.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addNum</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  num</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  num: num, </span></span>
<span class="line"><span style="color:#E1E4E8;">  addNum: addNum</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./bar.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(bar.num)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">bar.</span><span style="color:#B392F0;">addNum</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(bar.num); </span><span style="color:#6A737D;">// 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/bar.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addNum</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  num</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  num: num, </span></span>
<span class="line"><span style="color:#24292E;">  addNum: addNum</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./bar.js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(bar.num)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">bar.</span><span style="color:#6F42C1;">addNum</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(bar.num); </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><p>运行 webpack 命令后，我们可得到最终的输出文件 bundle.js，最终生成的 bundle.js 文件中的内容实际上是一个自执行函数，其传入的参数 modules 对象包含了入口文件以及各个依赖模块，形式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./src/bar.js&quot;</span><span style="color:#E1E4E8;">:(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {}),</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">:(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {})</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./src/bar.js&quot;</span><span style="color:#24292E;">:(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {}),</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">:(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) {})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 modules 对象中，各个属性名为文件路径字符串，属性值为一个函数，其中包含了文件源代码中的内容，而源代码中的引入输出功能则是通过自定义的方式来实现的。 其中的关键便是 <strong>webpack_require</strong> 方法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">// The require function</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Check if module is in cache</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (installedModules[moduleId]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> installedModules[moduleId].exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Create a new module (and put it into the cache)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    i: moduleId,</span></span>
<span class="line"><span style="color:#E1E4E8;">    l: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    exports: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Execute the module function</span></span>
<span class="line"><span style="color:#E1E4E8;">  modules[moduleId].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, __webpack_require__);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Flag the module as loaded</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Return the exports of the module</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> installedModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">// The require function</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__webpack_require__</span><span style="color:#24292E;">(</span><span style="color:#E36209;">moduleId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Check if module is in cache</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (installedModules[moduleId]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> installedModules[moduleId].exports;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Create a new module (and put it into the cache)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedModules[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    i: moduleId,</span></span>
<span class="line"><span style="color:#24292E;">    l: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    exports: {}</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Execute the module function</span></span>
<span class="line"><span style="color:#24292E;">  modules[moduleId].</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, __webpack_require__);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Flag the module as loaded</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Return the exports of the module</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>webpack_require</strong> 方法接收模块唯一的 moduleId 作为参数，其主要做了以下几件事：</p><p>判断该模块是否存在缓存对象中，若是则返回缓存对象中对应模块，若否则定义模块对象并存储进缓存对象中； 执行 modules 对象中对应模块的函数（在函数中会将该模块输出的内容存储进 module.exports 中）； 返回该模块 module.exports；</p><p>所以，在最终生成的自执行函数中，除了对一些变量、方法的定义外，其最终返回了对入口文件的引用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(__webpack_require__.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__webpack_require__</span><span style="color:#24292E;">(__webpack_require__.s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>接下来便会按我们的预期去执行 <strong>webpack_require</strong> 函数，传入的 moduleId 为 ./src/index.js，所以会执行 modules 对象中相应的属性值函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/index.js 对应函数</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;// src/index.js</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">var bar = __webpack_require__(/*! ./bar.js */ </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">./src/bar.js</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">);</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">console.log(bar.num)  // 1</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">bar.addNum();</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">console.log(bar.num); // 1</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./src/index.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/index.js 对应函数</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;// src/index.js</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">var bar = __webpack_require__(/*! ./bar.js */ </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">./src/bar.js</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">);</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">console.log(bar.num)  // 1</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">bar.addNum();</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">console.log(bar.num); // 1</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./src/index.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>可以看到，在该函数中使用自定义的 <strong>webpack_require</strong> 方法去替代了 CommonJS 中的 require 方法引入 bar.js 模块，并执行相应代码。 而在引入 ./src/bar.js 所对应的属性值函数时，也会执行函数内的代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/bar.js 对应函数</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;var num = 1;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">function addNum() {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  num++;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">module.exports = {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  num: num,</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  addNum: addNum</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./src/bar.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/bar.js 对应函数</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;var num = 1;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">function addNum() {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  num++;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">module.exports = {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  num: num,</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  addNum: addNum</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./src/bar.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>我们会发现该函数的实际内容与 bar.js 模块的内容是一模一样的，但实际上不同的是函数中 module.exports 并不是属于 CommonJS 模块的语法，而是函数中传进来的 module 对象的属性，这个 module 是 Webpack 中自定义的模块对象，形式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  i: moduleId,</span></span>
<span class="line"><span style="color:#E1E4E8;">  l: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  exports: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedModules[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  i: moduleId,</span></span>
<span class="line"><span style="color:#24292E;">  l: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  exports: {}</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在 Webpack 中正是通过这种方式实现模块内容的输出。 至此，Webpack 已经实现了 CommonJS 模块的引入输出功能，接下来我们再来深究 CommonJS 模块输出的一个特性：CommonJS 模块输出的是值的缓存，不存在动态更新。 上述的例子，在 index.js 文件中先输出 num 的值，然后再调用 addNum 方法，最后再输出 num 的值，会发现 num 的值没有改变。因为 addNum 方法改变的是 bar.js 中 num 的值，而在 bar.js 中的输出是以浅拷贝的方式。 所以，在执行 ./src/bar.js 对应属性值函数时，可以发现如下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {\\n  num: num,\\n  addNum: addNum\\n}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {\\n  num: num,\\n  addNum: addNum\\n}</span></span></code></pre></div><p>这也表明了在 Webpack 中模块的输出实现方式依旧遵循 CommonJS 模块输出的特性，输出其实是以浅拷贝的方式来实现的（注意这点，会与下述 ES6 中的 export 输出的特性做比较）。 ES6 在 ES6 模块化方案中，使用 import 引入模块，export 或 export default 输出模块。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span></span>
<span class="line"><span style="color:#6A737D;">// src/bar.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addNum</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  num</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { num, addNum }</span></span>
<span class="line"><span style="color:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { num, addNum } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./bar.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#B392F0;">addNum</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num); </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span></span>
<span class="line"><span style="color:#6A737D;">// src/bar.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addNum</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  num</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { num, addNum }</span></span>
<span class="line"><span style="color:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { num, addNum } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./bar.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6F42C1;">addNum</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num); </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><p>运行 webpack 命令后，同样地输出一个 bundle.js 文件，在 bundle.js 文件中同样是一个自执行函数，与 CommonJS 模块打包出来的文件基本上是一致的，不同的是在 modules 对象中对应的属性值函数不同。 ES6 模块机制中输出的特性是：export 语句输出的接口，与其对应的值是动态绑定关系。 在 modules 对象 中 ./src/index.js 对应的属性值函数为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/index.js 对应函数</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony import */ var _bar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bar.js */ </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">./src/bar.js</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">);</span><span style="color:#79B8FF;">\\n\\n\\n</span><span style="color:#9ECBFF;">console.log(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">num</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">])  // 1</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">Object(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">addNum</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">])();</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">console.log(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">num</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]); // 2</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./src/index.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bar.js 对应的属性值函数为：</span></span>
<span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/bar.js 对应函数</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">num</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">, function() { return num; });</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">addNum</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">, function() { return addNum; });</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">var num = 1;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">function addNum() {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  num++;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n\\n\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./src/bar.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/index.js 对应函数</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_exports__</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony import */ var _bar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bar.js */ </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">./src/bar.js</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">);</span><span style="color:#005CC5;">\\n\\n\\n</span><span style="color:#032F62;">console.log(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">num</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">])  // 1</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">Object(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">addNum</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">])();</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">console.log(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">num</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]); // 2</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./src/index.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bar.js 对应的属性值函数为：</span></span>
<span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/bar.js 对应函数</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_exports__</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">num</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">, function() { return num; });</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">addNum</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">, function() { return addNum; });</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">var num = 1;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">function addNum() {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  num++;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./src/bar.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>可以看出其不是直接通过 module.exports 浅拷贝的方式来实现的，而是通过一个 <strong>webpack_require</strong>.d 方法来实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">getter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name, { enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, get: getter });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__webpack_require__.</span><span style="color:#6F42C1;">d</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">getter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">__webpack_require__.</span><span style="color:#6F42C1;">o</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, name)) {</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, name, { enumerable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, get: getter });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>该方法主要是直接通过定义对象属性的 getter，来实现对引入变量的访问仍是原先模块的内部变量。 而为什么仅仅定义了 getter 而不定义 setter 呢，是因为在 ES6 模块中，import命令输入的变量都是只读的，因为它的本质是输入接口；如果引入对变量是一个对象，改写变量的属性则是允许的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span></span>
<span class="line"><span style="color:#6A737D;">// src/bar.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNum</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> num;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> getNum</span></span>
<span class="line"><span style="color:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> getNum </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./bar.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNum</span><span style="color:#E1E4E8;">())  </span><span style="color:#6A737D;">// 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span></span>
<span class="line"><span style="color:#6A737D;">// src/bar.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNum</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> getNum</span></span>
<span class="line"><span style="color:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> getNum </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./bar.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNum</span><span style="color:#24292E;">())  </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><p>同样的执行 webpack 命令打包得到 bundle.js。 在 modules 对象 中 ./src/index.js 对应的属性值函数为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/index.js 对应函数</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony import */ var _bar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bar.js */ </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">./src/bar.js</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">);</span><span style="color:#79B8FF;">\\n\\n\\n</span><span style="color:#9ECBFF;">console.log(Object(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">default</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">])())  // 1</span><span style="color:#79B8FF;">\\n\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./src/index.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">在 modules 对象 中 .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bar.js </span><span style="color:#B392F0;">对应的属性值函数为</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/bar.js 对应函数</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">var num = 1;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">function getNum(){</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  return num;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">/* harmony default export */ __webpack_exports__[</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">default</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">] = (getNum);</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./src/bar.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/index.js 对应函数</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_exports__</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony import */ var _bar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bar.js */ </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">./src/bar.js</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">);</span><span style="color:#005CC5;">\\n\\n\\n</span><span style="color:#032F62;">console.log(Object(_bar_js__WEBPACK_IMPORTED_MODULE_0__[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">default</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">])())  // 1</span><span style="color:#005CC5;">\\n\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./src/index.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">在 modules 对象 中 .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bar.js </span><span style="color:#6F42C1;">对应的属性值函数为</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;">// modules 对象中 ./src/bar.js 对应函数</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_exports__</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;__webpack_require__.r(__webpack_exports__);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">var num = 1;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">function getNum(){</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  return num;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">/* harmony default export */ __webpack_exports__[</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">default</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">] = (getNum);</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./src/bar.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>对于 export.default 来说，其特性与 CommonJS 类似，输出也是以浅拷贝的方式来进行的，不同的是其是存储在 module.exports 中的 default 属性中的，而在入口文件中则是通过对象的 default 属性来访问的。</p><p>作者：淘淘笙悦 链接：<a href="https://juejin.cn/post/6844903808678510600" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903808678510600</a> 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>`,32),e=[o];function c(r,t,y,E,i,u){return n(),a("div",null,e)}const d=s(l,[["render",c]]);export{_ as __pageData,d as default};
