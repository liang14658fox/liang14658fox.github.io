import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.681fc4ae.js";const g=JSON.parse('{"title":"将一个字符串变成数字","description":"","frontmatter":{"title":"将一个字符串变成数字"},"headers":[],"relativePath":"1_base_JavaScript/封装好的功能/081.将字符串变成数字技巧.md","filePath":"1_base_JavaScript/封装好的功能/081.将字符串变成数字技巧.md"}'),p={name:"1_base_JavaScript/封装好的功能/081.将字符串变成数字技巧.md"},o=l(`<ul><li>常规操作</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(str))   </span><span style="color:#6A737D;">//2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(str))   </span><span style="color:#6A737D;">//2</span></span></code></pre></div><ul><li>优化一</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">~~</span><span style="color:#E1E4E8;">str)    </span><span style="color:#6A737D;">//2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">~~</span><span style="color:#24292E;">str)    </span><span style="color:#6A737D;">//2</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>js中有~是按位取反运算,~~ 用来作双非按位取反运算。</p><p>~~ 的作用是去掉小数部分,对于正数，向下取整；对于负数，向上取整；与Math.floor()不同的是，它只是单纯的去掉小数部分，不论正负都不会改变整数部分。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~~</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;      </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">;       </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;         </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#E1E4E8;">{};        </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#E1E4E8;">[];        </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;     </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;      </span><span style="color:#6A737D;">// =&gt; 1</span></span>
<span class="line"><span style="color:#F97583;">~~</span><span style="color:#79B8FF;">1.9</span><span style="color:#E1E4E8;">;       </span><span style="color:#6A737D;">// =&gt; 1</span></span>
<span class="line"><span style="color:#F97583;">~~-</span><span style="color:#79B8FF;">1.9</span><span style="color:#E1E4E8;">;      </span><span style="color:#6A737D;">// =&gt; -1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~~</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;      </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">;       </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;         </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#24292E;">{};        </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#24292E;">[];        </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">// =&gt; 0</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;      </span><span style="color:#6A737D;">// =&gt; 1</span></span>
<span class="line"><span style="color:#D73A49;">~~</span><span style="color:#005CC5;">1.9</span><span style="color:#24292E;">;       </span><span style="color:#6A737D;">// =&gt; 1</span></span>
<span class="line"><span style="color:#D73A49;">~~-</span><span style="color:#005CC5;">1.9</span><span style="color:#24292E;">;      </span><span style="color:#6A737D;">// =&gt; -1</span></span></code></pre></div></div><ul><li>优化二</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">str)    </span><span style="color:#6A737D;">//2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">str)    </span><span style="color:#6A737D;">//2</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JS中的 &#39;+&#39; 号</p><p>当用作单目操作符的时候，+操作符不会对Number类型产生影响。但如果应用在字符串类型上，会将其转换为数字：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=+</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a); </span><span style="color:#6A737D;">//25</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;50&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> b);    </span><span style="color:#6A737D;">//String</span></span>
<span class="line"><span style="color:#E1E4E8;">b</span><span style="color:#F97583;">=+</span><span style="color:#E1E4E8;">b;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> b);    </span><span style="color:#6A737D;">//Number</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=+</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a); </span><span style="color:#6A737D;">//25</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;50&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> b);    </span><span style="color:#6A737D;">//String</span></span>
<span class="line"><span style="color:#24292E;">b</span><span style="color:#D73A49;">=+</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> b);    </span><span style="color:#6A737D;">//Number</span></span></code></pre></div><p>通常使用+操作符可以快速地将字符串转换为数字。但是如果字符串字面量无法转化为数字的话，结果会出人意料：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;kangkang&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=+</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> a);    </span><span style="color:#6A737D;">//Number</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">b</span><span style="color:#F97583;">=+</span><span style="color:#E1E4E8;">b;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b); </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> b);    </span><span style="color:#6A737D;">//Number</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;kangkang&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=+</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> a);    </span><span style="color:#6A737D;">//Number</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">b</span><span style="color:#D73A49;">=+</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b); </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> b);    </span><span style="color:#6A737D;">//Number</span></span></code></pre></div></div>`,8),e=[o];function c(t,r,y,E,i,F){return a(),n("div",null,e)}const A=s(p,[["render",c]]);export{g as __pageData,A as default};
