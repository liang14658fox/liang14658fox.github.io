import{_ as a,o as e,c as l,a as s}from"./app.de68522d.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/other/03.前端学习路线.md"}'),i={name:"articles/other/03.前端学习路线.md"},o=s('<ul><li>HTML</li><li>HTMl5</li><li>CSS</li><li>CSS3</li><li>JavaScript基础</li><li>DOM/BOM</li><li>ES6</li><li>JavaScript高级</li><li>AJAX</li></ul><details class="details custom-block"><summary>AJAX</summary></details><details class="details custom-block"><summary>AJAX与Axios的关系</summary><p>axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新， axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios。</p></details><ul><li>Node.js</li></ul><details class="details custom-block"><summary>Node.js与Node？</summary><p>其实node和nodejs两个概念没有太大差别，我个人认为唯一的区别就是，人们说起node的时候语境更多的是再说node环境，而说nodejs时更多的是在说node是一门可以提供后端能力的技术。本质上来说，node就是nodejs，nodejs就是node。</p><ul><li>简单的说 Node.js 就是运行在服务端的 JavaScript。</li><li>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</li><li>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</li><li>node环境基于V8引擎提供了一种可以让JS代码跑在后端的能力，这就是node。其实这里的node本身和我们这篇讲的前端模块化没啥关系。但是因为npm是产生与node社区，node中也是通过npm来加载模块的，所以有必要说一下他们之间的关系。</li></ul></details><details class="details custom-block"><summary>NPM</summary><p>npm 是 Node.js 官方提供的包管理工具，他已经成了 Node.js 包的标准发布平台，用于 Node.js 包的发布、传播、依赖控制</p></details><details class="details custom-block"><summary>webpack npm node之间关系？</summary><ul><li>webpack是npm生态中的一个模块，我们可以通过全局安装webpack来使用webpack对项目进行打包；</li><li>webpack的运行依赖于node的环境，没有node是不能打包的，但是webpack打包后的项目本身只是前端静态资源和后台没有关系，也就是说不依赖与node，只要有后台能力的都可以部署项目。</li><li>npm是于Node社区中产生的，是nodejs的官方包管理工具，当你下载安装好node的时候，npm cli就自动安装好了。</li><li>正是因为npm的包管理，使得项目可以模块化的开发，而模块化的开发带来的这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别，而手动处理又是非常繁琐的，这就是webpack工具存在的意义。</li></ul></details><ul><li>HTTP协议</li><li>Vue</li></ul><details class="details custom-block"><summary>点击查看</summary></details>',9),t=[o];function d(c,m,n,r,p,u){return e(),l("div",null,t)}const x=a(i,[["render",d]]);export{j as __pageData,x as default};
