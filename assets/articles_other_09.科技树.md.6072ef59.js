import{_ as e,o as t,c as a,a as r}from"./app.259ad643.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是科技树？","slug":"什么是科技树","link":"#什么是科技树","children":[]},{"level":2,"title":"前端学习路线科技树","slug":"前端学习路线科技树","link":"#前端学习路线科技树","children":[]}],"relativePath":"articles/other/09.科技树.md"}'),o={name:"articles/other/09.科技树.md"},i=r('<h2 id="什么是科技树" tabindex="-1">什么是科技树？ <a class="header-anchor" href="#什么是科技树" aria-hidden="true">#</a></h2><p>打个比方，一款以生产线为主题的游戏，其的科技研发存在这样一种关系：</p><p><a href="https://wiki.factorio.com/Technologies/zh" target="_blank" rel="noreferrer">https://wiki.factorio.com/Technologies/zh</a></p><p>Factorio的科技树可以看作是一个有向无环图（DAG），其中每个节点代表一项科技，每条边表示一个科技对另一个科技的依赖关系。根据这个图，可以轻松地确定每个科技点之间的依赖关系，并且将它们在一个图表中呈现出来。</p><p>科技树系统的核心是描述科技之间的依赖关系。由于科技间存在各种依赖关系，如先决条件、升级等，往往需要通过图形方式将这些关系表达出来。在这个过程中，有向无环图成为科技树系统的首选。</p><p>首先，有向无环图（DAG）可以很好地描述因果关系和进化关系。在科技树中，研究一项科技通常需要先研究另一项科技，这就可以用箭头表示，箭头的方向表示依赖关系。同时，科技树应满足一定的规则，即不能形成环路，这样能保证科技树的合理性。这正是有向无环图所具备的特点。使用有向无环图能够很好地表示科技之间的依赖关系，同时保证科技树的结构合理。</p><p>其次，有向无环图还能表达科技升级关系。在游戏中，一项科技往往有多个升级版本，如战斗机有多种改进型号，各种改进型号之间的关系可以用图形方式表示。使用有向无环图既能表示多个升级版本，又能表示这些版本之间的依赖关系。</p><p>因此，有向无环图在科技树系统中被广泛采用，它能清晰地显示科技之间的关系、升级关系和依赖关系，帮助玩家更好地理解游戏内容，并提高了游戏的可玩性。</p><h2 id="前端学习路线科技树" tabindex="-1">前端学习路线科技树 <a class="header-anchor" href="#前端学习路线科技树" aria-hidden="true">#</a></h2><p>使用科技树思维引导学习路线</p>',10),c=[i];function s(_,n,p,h,l,d){return t(),a("div",null,c)}const u=e(o,[["render",s]]);export{m as __pageData,u as default};
